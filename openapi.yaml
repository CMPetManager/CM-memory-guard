openapi: 3.0.1
info:
  title: Photo album OpenAPI specification
  description:
    This specification is intended to describe the functionality of the photo album application
  version: 0.0.1
servers:
  - url: http://localhost:8080
    description: Dev server
paths:
  /users/login:
    get:
      summary: Method for user authorization
      tags:
        - AuthController
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: The email for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login 
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/JwtResponse'
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          
  /users/registr:
    post:
      summary: Method for registration 
      tags:
        - AuthController
      operationId: registrUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateDto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/UserReadDto'
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/refresh:
    post:
      summary: Method for refresh token 
      tags:
        - AuthController
      description: refresh user's auth
      operationId: refresh
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshDto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/JwtResponse'
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'        
  /users/forgot-password:
    put:
      summary: Forgot password
      tags:
        - AuthController
      description: after this method user should check his email 
      operationId: processForgotPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordDto'
      responses:
        default:
          description: successful operation
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      
  /users/reset-password:
    put:
      summary: Reset password
      tags:
        - AuthController
      description: Method for resete password 
      operationId: processResetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        default:
          description: successful operation
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  
  /albums/{coverId}:
    get:
      tags:
        - AlbumController
      summary: Find album by cover ID
      description: Find album by cover ID
      operationId: getAlbumByCoverId
      parameters:
         - name: coverId
           in: path
           description: cover id , which need to find an album
           required: true
           schema:
             type: integer
             format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumReadDto' 
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
         - AlbumController
      summary: Delete album by cover ID
      description: Method for delete album
      operationId: deleteAlbum
      parameters:
            - name: coverId
              in: path
              description: ID of the cover that needs to be deleted
              required: true
              schema:
                 type: integer
                 format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: {}
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          
  /albums:
    post:
      summary: Method for created album 
      tags:
        - AlbumController
      operationId: createAlbum
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlbumCreateDto'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumReadDto' 
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            
  /covers:
    post:
      summary: Method for created cover 
      tags:
        - CoverController
      operationId: createCover
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CoverCreateDto'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverReadDto' 
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /covers/{userId}:
    get:
      tags:
        - CoverController
      summary: Find covers by user ID
      operationId: getAllCoverByUserId
      parameters:
         - name: userId
           in: path
           description: user id , which need to find covers
           required: true
           schema:
             type: integer
             format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Covers' 
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /covers/{id}:
    delete:
      tags:
         - CoverController
      summary: Delete cover by cover ID
      description: Method for delete cover
      operationId: deleteCover
      parameters:
            - name: id
              in: path
              description: ID for delete cover
              required: true
              schema:
                 type: integer
                 format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: {}
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /covers/update/{id}:
    put:
      summary: Update cover
      tags:
        - CoverController
      description: Method for update cover 
      operationId: updateCover
      parameters:
        - name: id
          in: path
          description: id that need to update cover
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent cover
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CoverCreateDto'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverReadDto' 
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /pages:
    post:
      summary: Method for created page 
      tags:
        - PageController
      operationId: createPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageCreateDto'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageReadDto' 
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /pages/{id}:
    delete:
      tags:
         - PageController
      summary: Delete page by ID
      description: Method for delete page
      operationId: deletePage
      parameters:
            - name: id
              in: path
              description: ID for delete page
              required: true
              schema:
                 type: integer
                 format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: {}
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /pages/all/{albumId}:
    get:
      tags:
        - PageController
      summary: Find all pages by album ID
      description: Find pages by album ID
      operationId: getAllPagesByAlbumId
      parameters:
         - name: albumId
           in: path
           description: album id , which need to find pages
           required: true
           schema:
             type: integer
             format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pages' 
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /pages/one/{id}:
    get:
      tags:
        - PageController
      summary: Find page by ID
      description: Find page by ID
      operationId: getPage
      parameters:
         - name: id
           in: path
           description: id , which need to find page
           required: true
           schema:
             type: integer
             format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageReadDto' 
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /pages/update/{id}:
    put:
      summary: Update cover
      tags:
        - PageController
      description: Method for update page 
      operationId: updatePage
      parameters:
        - name: id
          in: path
          description: id that need to update page
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent page in the album
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageCreateDto'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageReadDto' 
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'              
  
  /images:
    post:
      summary: Method for created image 
      tags:
        - ImageController
      operationId: createImage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageCreateDto'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageReadDto' 
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /images/{id}:
    delete:
      tags:
         - ImageController
      summary: Delete image by ID
      description: Method for delete image
      operationId: deleteImage
      parameters:
            - name: id
              in: path
              description: ID for delete image
              required: true
              schema:
                 type: integer
                 format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: {}
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
components:
  schemas:
    UserCreateDto:
      type: object
      properties:
        name:
          type: string
          example: theUser
        email:
          type: string
          example: egor@email.com
        password:
          type: string
          example: MyNew_pass
    
    UserReadDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: theUser
        email:
          type: string
          example: egor@email.com
        password:
          type: string
          example: MyNew_pass
    
    ForgotPasswordDto:
      type: object
      properties:
        email:
          type: string
          example: egor@email.com
    UpdatePasswordDto:
      type: object
      properties:
        token:
          type: string
        password:
          type: string
    JwtResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          example: egor@email.com
        accessToken:
          type: string
        refreshToken:
          type: string  
    
    RefreshDto:
      type: object
      properties:
        refreshToken:
          type: string  
    
    PageCreateDto:
      type: object
      properties:
        description:
          type: string
          example: some words about page
        color:
          type: string
          example: red
        template_page:
          type: string
          example: Horizontal image and text field below
        tag_people:
          type: string
          example: Andrew,Egor
        tag_place:
          type: string
          example: Germany,Berlin
        animation:
          type: string
          example: slide
    
    PageReadDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 11
        description:
          type: string
          example: some words about page
        color:
          type: string
          example: red
        template_page:
          type: string
          example: Horizontal image and text field below
        tag_people:
          type: string
          example: Andrew,Egor
        tag_place:
          type: string
          example: Germany,Berlin
        animation:
          type: string
          example: slide
        album:
          $ref: '#/components/schemas/AlbumReadDto'
    
    AlbumCreateDto:      
      type: object
      properties:
        created_at:
          type: string
          format: date-time
        cover_id:
          type: integer
          format: int64
          
    AlbumReadDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
        page:
          $ref: '#/components/schemas/Pages'
    
    CoverCreateDto:
      type: object
      properties:
        description:
          type: string
          example: place description
        album_id:
          type: integer
          format: int64
    
    CoverReadDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
          example: place description
        album_id:
          type: integer
          format: int64
    
    ImageCreateDto:
      type: object
      
      properties:
        link:
          type: string
          example: photo link
        page_id:
          type: integer
          format: int64
        cover_id:
          type: integer
          format: int64
    
    ImageReadDto:
      type: object
      required:
        - link
      properties:
        id:
          type: integer
          format: int64
        link:
          type: string
          example: photo link
        page_id:
          type: integer
          format: int64
        cover_id:
          type: integer
          format: int64
        
    
    Covers:
      type: array
      items:
         $ref: '#/components/schemas/CoverReadDto'
    
    Pages:
      type: array
      items:
         $ref: '#/components/schemas/PageReadDto'  
    
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string      
          
      
      