/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.openapitools.model.CoverCreateDto;
import org.openapitools.model.CoverReadDto;
import org.openapitools.model.Error;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-07T20:09:54.805483300+03:00[Europe/Moscow]")
@Validated
@Tag(name = "CoverController", description = "the CoverController API")
public interface CoversApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /covers : Method for created cover
     *
     * @param coverCreateDto (optional)
     * @return successful operation (status code 200)
     * or something wrong (status code 400)
     */
    @Operation(
            operationId = "createCover",
            summary = "Method for created cover",
            tags = {"CoverController"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CoverReadDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "something wrong", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/covers",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default ResponseEntity<CoverReadDto> createCover(
            @Parameter(name = "CoverCreateDto", description = "") @Valid @RequestBody(required = false) CoverCreateDto coverCreateDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"description\" : \"place description\", \"album_id\" : 6, \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /covers/{id} : Delete cover by cover ID
     * Method for delete cover
     *
     * @param id ID for delete cover (required)
     * @return successful operation (status code 200)
     * or something wrong (status code 400)
     */
    @Operation(
            operationId = "deleteCover",
            summary = "Delete cover by cover ID",
            description = "Method for delete cover",
            tags = {"CoverController"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "something wrong", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/covers/{id}",
            produces = {"application/json"}
    )
    default ResponseEntity<Object> deleteCover(
            @Parameter(name = "id", description = "ID for delete cover", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /covers/{userId} : Find covers by user ID
     *
     * @param userId user id , which need to find covers (required)
     * @return successful operation (status code 200)
     * or something wrong (status code 400)
     */
    @Operation(
            operationId = "getAllCoverByUserId",
            summary = "Find covers by user ID",
            tags = {"CoverController"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CoverReadDto.class)))
                    }),
                    @ApiResponse(responseCode = "400", description = "something wrong", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/covers/{userId}",
            produces = {"application/json"}
    )
    default ResponseEntity<List<CoverReadDto>> getAllCoverByUserId(
            @Parameter(name = "userId", description = "user id , which need to find covers", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"description\" : \"place description\", \"album_id\" : 6, \"id\" : 0 }, { \"description\" : \"place description\", \"album_id\" : 6, \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /covers/{id} : Update cover
     * Method for update cover
     *
     * @param id             id that need to update cover (required)
     * @param coverCreateDto Update an existent cover (required)
     * @return successful operation (status code 200)
     * or something wrong (status code 400)
     */
    @Operation(
            operationId = "updateCover",
            summary = "Update cover",
            description = "Method for update cover",
            tags = {"CoverController"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CoverReadDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "something wrong", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/covers/{id}",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default ResponseEntity<CoverReadDto> updateCover(
            @Parameter(name = "id", description = "id that need to update cover", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
            @Parameter(name = "CoverCreateDto", description = "Update an existent cover", required = true) @Valid @RequestBody CoverCreateDto coverCreateDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"description\" : \"place description\", \"album_id\" : 6, \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
