/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import org.openapitools.model.Error;
import org.openapitools.model.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-07T20:09:54.805483300+03:00[Europe/Moscow]")
@Validated
@Tag(name = "AuthController", description = "the AuthController API")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /users/login : Method for user authorization
     *
     * @param email The email for login (required)
     * @param password The password for login (required)
     * @return Successful operation (status code 200)
     *         or something wrong (status code 400)
     */
    @Operation(
        operationId = "loginUser",
        summary = "Method for user authorization",
        tags = { "AuthController" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = JwtResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "something wrong", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/login",
        produces = { "application/json" }
    )
    default ResponseEntity<JwtResponse> loginUser(
        @NotNull @Parameter(name = "email", description = "The email for login", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "email", required = true) String email,
        @NotNull @Parameter(name = "password", description = "The password for login", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "password", required = true) String password
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 0, \"accessToken\" : \"accessToken\", \"email\" : \"egor@email.com\", \"refreshToken\" : \"refreshToken\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /users/forgot-password : Forgot password
     * after this method user should check his email
     *
     * @param forgotPasswordDto  (optional)
     * @return something wrong (status code 400)
     *         or successful operation (status code 200)
     */
    @Operation(
        operationId = "processForgotPassword",
        summary = "Forgot password",
        description = "after this method user should check his email",
        tags = { "AuthController" },
        responses = {
            @ApiResponse(responseCode = "400", description = "something wrong", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "successful operation")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/forgot-password",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> processForgotPassword(
        @Parameter(name = "ForgotPasswordDto", description = "") @Valid @RequestBody(required = false) ForgotPasswordDto forgotPasswordDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /users/reset-password : Reset password
     * Method for resete password
     *
     * @param updatePasswordDto  (optional)
     * @return something wrong (status code 400)
     *         or successful operation (status code 200)
     */
    @Operation(
        operationId = "processResetPassword",
        summary = "Reset password",
        description = "Method for resete password",
        tags = { "AuthController" },
        responses = {
            @ApiResponse(responseCode = "400", description = "something wrong", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "successful operation")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/reset-password",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> processResetPassword(
        @Parameter(name = "UpdatePasswordDto", description = "") @Valid @RequestBody(required = false) UpdatePasswordDto updatePasswordDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /users/refresh : Method for refresh token
     * refresh user&#39;s auth
     *
     * @param refreshDto  (optional)
     * @return Successful operation (status code 200)
     *         or something wrong (status code 400)
     */
    @Operation(
        operationId = "refresh",
        summary = "Method for refresh token",
        description = "refresh user's auth",
        tags = { "AuthController" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = JwtResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "something wrong", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/refresh",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<JwtResponse> refresh(
        @Parameter(name = "RefreshDto", description = "") @Valid @RequestBody(required = false) RefreshDto refreshDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 0, \"accessToken\" : \"accessToken\", \"email\" : \"egor@email.com\", \"refreshToken\" : \"refreshToken\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /users/registr : Method for registration
     *
     * @param userCreateDto  (optional)
     * @return Successful operation (status code 200)
     *         or something wrong (status code 400)
     */
    @Operation(
        operationId = "registrUser",
        summary = "Method for registration",
        tags = { "AuthController" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserReadDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "something wrong", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/registr",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserReadDto> registrUser(
        @Parameter(name = "UserCreateDto", description = "") @Valid @RequestBody(required = false) UserCreateDto userCreateDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"password\" : \"MyNew_pass\", \"name\" : \"theUser\", \"id\" : 0, \"email\" : \"egor@email.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
