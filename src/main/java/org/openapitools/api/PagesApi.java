/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.openapitools.model.Error;
import org.openapitools.model.PageCreateDto;
import org.openapitools.model.PageReadDto;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-07T20:09:54.805483300+03:00[Europe/Moscow]")
@Validated
@Tag(name = "PageController", description = "the PageController API")
public interface PagesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /pages : Method for created page
     *
     * @param pageCreateDto  (optional)
     * @return successful operation (status code 200)
     *         or something wrong (status code 400)
     */
    @Operation(
        operationId = "createPage",
        summary = "Method for created page",
        tags = { "PageController" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageReadDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "something wrong", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/pages",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PageReadDto> createPage(
        @Parameter(name = "PageCreateDto", description = "") @Valid @RequestBody(required = false) PageCreateDto pageCreateDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"color\" : \"red\", \"tag_people\" : \"Andrew,Egor\", \"template_page\" : \"Horizontal image and text field below\", \"description\" : \"some words about page\", \"id\" : 11, \"tag_place\" : \"Germany,Berlin\", \"animation\" : \"slide\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /pages/{id} : Delete page by ID
     * Method for delete page
     *
     * @param id ID for delete page (required)
     * @return successful operation (status code 200)
     *         or something wrong (status code 400)
     */
    @Operation(
        operationId = "deletePage",
        summary = "Delete page by ID",
        description = "Method for delete page",
        tags = { "PageController" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "something wrong", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/pages/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> deletePage(
        @Parameter(name = "id", description = "ID for delete page", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /pages/{albumId} : Find all pages by album ID
     * Find pages by album ID
     *
     * @param albumId album id , which need to find pages (required)
     * @return successful operation (status code 200)
     *         or something wrong (status code 400)
     */
    @Operation(
        operationId = "getAllPagesByAlbumId",
        summary = "Find all pages by album ID",
        description = "Find pages by album ID",
        tags = { "PageController" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PageReadDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "something wrong", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pages/{albumId}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<PageReadDto>> getAllPagesByAlbumId(
        @Parameter(name = "albumId", description = "album id , which need to find pages", required = true, in = ParameterIn.PATH) @PathVariable("albumId") Long albumId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"color\" : \"red\", \"tag_people\" : \"Andrew,Egor\", \"template_page\" : \"Horizontal image and text field below\", \"description\" : \"some words about page\", \"id\" : 11, \"tag_place\" : \"Germany,Berlin\", \"animation\" : \"slide\" }, { \"color\" : \"red\", \"tag_people\" : \"Andrew,Egor\", \"template_page\" : \"Horizontal image and text field below\", \"description\" : \"some words about page\", \"id\" : 11, \"tag_place\" : \"Germany,Berlin\", \"animation\" : \"slide\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /pages/{id} : Find page by ID
     * Find page by ID
     *
     * @param id id , which need to find page (required)
     * @return successful operation (status code 200)
     *         or something wrong (status code 400)
     */
    @Operation(
        operationId = "getPage",
        summary = "Find page by ID",
        description = "Find page by ID",
        tags = { "PageController" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageReadDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "something wrong", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pages/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<PageReadDto> getPage(
        @Parameter(name = "id", description = "id , which need to find page", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"color\" : \"red\", \"tag_people\" : \"Andrew,Egor\", \"template_page\" : \"Horizontal image and text field below\", \"description\" : \"some words about page\", \"id\" : 11, \"tag_place\" : \"Germany,Berlin\", \"animation\" : \"slide\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /pages/{id} : Update cover
     * Method for update page
     *
     * @param id id that need to update page (required)
     * @param pageCreateDto Update an existent page at the album (optional)
     * @return successful operation (status code 200)
     *         or something wrong (status code 400)
     */
    @Operation(
        operationId = "updatePage",
        summary = "Update cover",
        description = "Method for update page",
        tags = { "PageController" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageReadDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "something wrong", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/pages/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PageReadDto> updatePage(
        @Parameter(name = "id", description = "id that need to update page", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "PageCreateDto", description = "Update an existent page in the album") @Valid @RequestBody(required = false) PageCreateDto pageCreateDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"color\" : \"red\", \"tag_people\" : \"Andrew,Egor\", \"template_page\" : \"Horizontal image and text field below\", \"description\" : \"some words about page\", \"id\" : 11, \"tag_place\" : \"Germany,Berlin\", \"animation\" : \"slide\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
