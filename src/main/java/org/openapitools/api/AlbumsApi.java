/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.openapitools.model.AlbumCreateDto;
import org.openapitools.model.AlbumReadDto;
import org.openapitools.model.Error;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-07T20:09:54.805483300+03:00[Europe/Moscow]")
@Validated
@Tag(name = "AlbumController", description = "the AlbumController API")
public interface AlbumsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /albums : Method for created album
     *
     * @param albumCreateDto (optional)
     * @return successful operation (status code 200)
     * or something wrong (status code 400)
     */
    @Operation(
            operationId = "createAlbum",
            summary = "Method for created album",
            tags = {"AlbumController"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = AlbumReadDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "something wrong", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/albums",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default ResponseEntity<AlbumReadDto> createAlbum(
            @Parameter(name = "AlbumCreateDto", description = "") @Valid @RequestBody(required = false) AlbumCreateDto albumCreateDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"page\" : [ { \"color\" : \"red\", \"tag_people\" : \"Andrew,Egor\", \"template_page\" : \"Horizontal image and text field below\", \"description\" : \"some words about page\", \"id\" : 11, \"tag_place\" : \"Germany,Berlin\", \"animation\" : \"slide\" }, { \"color\" : \"red\", \"tag_people\" : \"Andrew,Egor\", \"template_page\" : \"Horizontal image and text field below\", \"description\" : \"some words about page\", \"id\" : 11, \"tag_place\" : \"Germany,Berlin\", \"animation\" : \"slide\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /albums/{coverId} : Delete album by cover ID
     * Method for delete album
     *
     * @param coverId ID of the cover that needs to be deleted (required)
     * @return successful operation (status code 200)
     * or something wrong (status code 400)
     */
    @Operation(
            operationId = "deleteAlbum",
            summary = "Delete album by cover ID",
            description = "Method for delete album",
            tags = {"AlbumController"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "something wrong", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/albums/{coverId}",
            produces = {"application/json"}
    )
    default ResponseEntity<Object> deleteAlbum(
            @Parameter(name = "coverId", description = "ID of the cover that needs to be deleted", required = true, in = ParameterIn.PATH) @PathVariable("coverId") Long coverId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /albums/{coverId} : Find album by cover ID
     * Find album by cover ID
     *
     * @param coverId cover id , which need to find an album (required)
     * @return successful operation (status code 200)
     * or something wrong (status code 400)
     */
    @Operation(
            operationId = "getAlbumByCoverId",
            summary = "Find album by cover ID",
            description = "Find album by cover ID",
            tags = {"AlbumController"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = AlbumReadDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "something wrong", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/albums/{coverId}",
            produces = {"application/json"}
    )
    default ResponseEntity<AlbumReadDto> getAlbumByCoverId(
            @Parameter(name = "coverId", description = "cover id , which need to find an album", required = true, in = ParameterIn.PATH) @PathVariable("coverId") Long coverId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"page\" : [ { \"color\" : \"red\", \"tag_people\" : \"Andrew,Egor\", \"template_page\" : \"Horizontal image and text field below\", \"description\" : \"some words about page\", \"id\" : 11, \"tag_place\" : \"Germany,Berlin\", \"animation\" : \"slide\" }, { \"color\" : \"red\", \"tag_people\" : \"Andrew,Egor\", \"template_page\" : \"Horizontal image and text field below\", \"description\" : \"some words about page\", \"id\" : 11, \"tag_place\" : \"Germany,Berlin\", \"animation\" : \"slide\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
