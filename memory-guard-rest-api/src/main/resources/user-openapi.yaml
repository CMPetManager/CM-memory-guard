openapi: 3.0.3
info:
  description: This specification is intended to describe the functionality of the
    photo album application (User's part)
  title: Photo album OpenAPI specification
  version: 1.0.11
servers:
  - description: Dev server
    url: http://localhost:8080
paths:
  /login:
    post:
      summary: Method for user authorization
      tags:
        - AuthController
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'

  /users:
    post:
      summary: Method for registration
      tags:
        - AuthController
      operationId: registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReadUser'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateReadUser'
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'

  /users/refresh-token:
    post:
      summary: Method for refresh token
      tags:
        - AuthController
      description: refresh user's auth
      operationId: refresh
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'

  /users/forgot-password:
    post:
      summary: Forgot password
      tags:
        - ForgotPasswordController
      description: after this method user should check his email
      operationId: forgotPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPassword'
      responses:
        default:
          description: successful operation of creation new password
        '400':
          description: something wrong with password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'

  /users/reset:
    get:
      summary: Get user token
      tags:
        - ForgotPasswordController
      description: Method for getting user token
      operationId: resetPasswordForm
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid token value

  /users/reset-password:
    post:
      summary: Reset user's password
      tags:
        - AuthController
      description: Method for reset user's password
      operationId: resetPassword
        - ForgotPasswordController
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePassword'
      responses:
        default:
          description: successful operation
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'

  /users/{userId}:
    put:
      summary: Update password
      tags:
        - UserController
      description: Method for update password
      operationId: updatePassword
      parameters:
        - name: userId
          in: path
          description: userId to update password
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePassword'

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
    delete:
      tags:
        - UserController
      summary: Delete user userId
      description: Method for delete user
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: ID for delete user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        '400':
          description: something wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
components:
  schemas:
    CreateReadUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: theUser
        email:
          type: string
          example: egor@email.com
        password:
          type: string
          example: 2uffu4fuo

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: egor@email.com
        password:
          type: string
          example: MyNew_pass

    ForgotPassword:
      type: object
      properties:
        email:
          type: string
          example: egor@email.com

    UpdatePassword:
      type: object
      properties:
        token:
          type: string
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        name:
          type: string
        token:
          $ref: '#/components/schemas/Token'

    Token:
      type: object
      properties:
        accessToken:
          type: string
        expirationIn:
          type: integer
          format: int64
        refreshToken:
          type: string

    RefreshToken:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        refreshToken:
          type: string

    AlbumModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        albumDescription:
          type: string
          example: some words about page
        color:
          type: string
          example: red
        templatePage:
          type: string
          example: Horizontal image and text field below
        tagPeople:
          type: string
          example: Andrew,Egor
        tagPlace:
          type: string
          example: Germany,Berlin
        animation:
          type: string
          example: slide
        coverDescription:
          type: string
          example: place description
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageModel'

    ImageModel:
      type: object
      required:
        - link
      properties:
        id:
          type: integer
          format: int64
        link:
          type: string
          example: photo link
        name:
          type: string
          example: name
        type:
          type: string
          example: type
        albumId:
          type: integer
          format: int64

    ApplicationError:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string